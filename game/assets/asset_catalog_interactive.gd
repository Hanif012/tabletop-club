# tabletop-club
# Copyright (c) 2020-2023 Benjamin 'drwhut' Beddows.
# Copyright (c) 2021-2023 Tabletop Club contributors (see game/CREDITS.tres).
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

class_name AssetCatalogInteractive
extends Reference

## Import asset packs in a separate thread.
##
## You can use [method start] to start the import thread, after which you can
## repeatedly check using [method is_done] to see if importing is complete.
## Once that function returns [code]true[/code], you can then use
## [method get_packs] to get the list of [AssetPack] generated by the import
## thread.


# The thread that imports custom assets.
var _import_thread: Thread = null


## Start importing assets in a separate thread. If the thread was already
## started and has yet to complete its function, then the main thread is blocked
## until it is done. If [code]scan_dir[/code] is empty, then the default
## external directory is scanned for asset packs.
func start(scan_dir: String = "") -> void:
	if _import_thread != null:
		if _import_thread.is_active():
			_import_thread.wait_to_finish()
	
	_import_thread = Thread.new()
	_import_thread.start(self, "_import_assets", scan_dir)


## Check whether the thread is done importing custom assets or not.
func is_done() -> bool:
	if _import_thread == null:
		return false
	
	return not _import_thread.is_alive()


## Get the list of [AssetPack] generated from the import process. Note that this
## function waits for the thread to finish before returning, so you should use
## [method is_done] before calling this function to avoid blocking the main
## thread. If the thread has not been started, then an empty array is returned.
func get_packs() -> Array:
	if _import_thread == null:
		return []
	
	if not _import_thread.is_active():
		return []
	
	return _import_thread.wait_to_finish()


# The thread function that imports the custom assets.
# TODO: Make array typed in 4.x
func _import_assets(scan_dir: String) -> Array:
	var catalog := AssetCatalog.new()
	
	if scan_dir.empty():
		catalog.scan_external_dir()
	else:
		var dir := Directory.new()
		var err := dir.open(scan_dir)
		if err == OK:
			catalog.scan_dir_for_packs(dir)
		else:
			push_error("Failed to open scan directory '%s' (error: %d)" % [
					scan_dir, err])
	
	var imported_packs := catalog.import_all()
	catalog.clean_rogue_files()
	
	return imported_packs
